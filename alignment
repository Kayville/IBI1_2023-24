import blosum as bl
matrix = bl.BLOSUM(62)
#Import the blosum library and create a BLOSUM62 matrix

# Define a function called alignment to calculate the alignment score and similarity percentage of a sequence. This function applies the amino acid sequences of three species and calculates the alignment score for each position based on the BLOSUM62 matrix, recording the number of identical amino acids to ultimately obtain the similarity percentage.
def alignment(human, mouse, rat, blosum62_dict):
    h_and_m_score = 0
    h_and_r_score = 0
    m_and_r_score = 0
    h_and_m_similarity = 0
    h_and_r_similarity = 0
    m_and_r_similarity = 0
    sequence_length = len(human)

    for index in range(sequence_length):  # Iterate through each amino acid in sequences
        human_amino = human[index]
        mouse_amino = mouse[index]
        rat_amino = rat[index]
        hm_pair = human_amino + mouse_amino
        hr_pair = human_amino + rat_amino
        mr_pair = mouse_amino + rat_amino
        h_and_m_score += blosum62_dict.get(hm_pair, 0)
        h_and_r_score += blosum62_dict.get(hr_pair, 0)
        m_and_r_score += blosum62_dict.get(mr_pair, 0)
        if human_amino == mouse_amino:
            h_and_m_similarity += 1
        if human_amino == rat_amino:
            h_and_r_similarity += 1
        if mouse_amino == rat_amino:
            m_and_r_similarity += 1

   
    h_and_m_similarity /= sequence_length
    h_and_r_similarity /= sequence_length
    m_and_r_similarity /= sequence_length
    
    return (h_and_m_score, h_and_r_score, m_and_r_score,
            h_and_m_similarity, h_and_r_similarity, m_and_r_similarity)

scores = alignment(human, mouse, rat, blosum62_dict)
